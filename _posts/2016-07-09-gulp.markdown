---
layout: interior
title: "Getting Started with Gulp"
date: 2016-07-09
tags: [productivity and tools]
permalink: gulp
---
[Gulp](https://github.com/gulpjs/gulp#what-is-gulp){:target="_blank"} is a tool that can help you automate and enhance your workflow. Basically, after installing it, you then install tools that go with it, and write a file that tells those tools what to do to your project. In this post, I'm going to walk through installing gulp and [getting started](https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md){:target="_blank"} with some basic tools that can help you with your web projects.

## Installing Gulp ##

First, you should open up the console and install gulp globally by running the following command:

{% highlight none %}
npm install --global gulp-cli
{% endhighlight %}

Next, navigate to your project directory and initialize NPM:

{% highlight none %}
npm init
{% endhighlight %}

This will automatically create a `package.json` file that will ask you various questions about your project. Try your best when answering the questions, but don't sweat it. You can always open up [this file](https://docs.npmjs.com/files/package.json){:target="_blank"} later on and make changes.

After that, install gulp in your project devDependencies:

{% highlight none %}
npm install --save-dev gulp
{% endhighlight %}

The `package.json` file contains a list of dependencies, or packages that your project depends on, and this command just added gulp to the list of dependencies.

## Creating a Gulp File ##

Now that gulp is installed and you have a automatically generated `package.json` file inside your project directory, it is time to create your `gulpfile.js`. This file will contain all of gulp's tasks that you can run from the command line.

At the top of your gulpfile should be a list of variable declarations for your packages. First and foremost, let's declare one for gulp:

{% highlight js %}
var gulp = require('gulp');
{% endhighlight %}

But we need to have more packages in order to do anything useful with gulp. So, let's install a few more [packages](http://gulpjs.com/plugins/){:target="_blank"}. From the console, run the following commands one at a time:

{% highlight none %}
npm install --save-dev gulp-sourcemaps
npm install --save-dev gulp-sass
npm install --save-dev gulp-clean-css
npm install --save-dev gulp-rename
{% endhighlight %}

And then we'll add them to our gulpfile:

{% highlight js %}
var gulp = require('gulp'),
    sourcemaps = require('gulp-sourcemaps'),
    sass = require('gulp-sass'),
    cleanCSS = require('gulp-clean-css'),
    rename = require('gulp-rename');
{% endhighlight %}

## Writing a Task to Compile Sass ##

Below our variable declarations, we can begin writing tasks for our gulpfile, which we can run from the command line. Here is code for a task called "compile" which will compile our SCSS files into a CSS stylesheet.

{% highlight js %}
gulp.task('compile', function() {
    return gulp.src("css/scss/main.scss")
        .pipe(sass())
        .pipe(gulp.dest('css'));
});
{% endhighlight %}

First, the function tells gulp to get the `main.scss` file from inside the `/css/scss/` directory. Then, [gulp-sass](http://gulpjs.com/plugins/){:target="_blank"} does its magic. And finally, the outputted stylesheet is dropped off in the `/css/` directory by using `gulp.dest()`.

Gulp can also generate a sourcemap alongside the compiled stylesheet. To do this, we just need to add a single line of code to our function:

{% highlight js %}
gulp.task('compile', function() {
    return gulp.src('css/scss/main.scss')
        .pipe(sass())
        .pipe(sourcemaps.write('./'))
        .pipe(gulp.dest('css'));
});
{% endhighlight %}

All we need to do to tell gulp to perform this task is input the following command into the console:

{% highlight none %}
gulp compile
{% endhighlight %}

And the result will be a `style.map` file next to the `style.css` file, all generated by gulp in a matter of seconds.

## Minifying Our Stylesheet with Gulp ##

We can create a second task below the first one. This task will minify our stylesheet and rename it to `style.min.css`. Minifying your CSS files after concatening them is an important step in the [performance optimization](performance-optimization) of your site, so this will be very useful. Here's the code:

{% highlight js %}
gulp.task('minify', function() {
    return gulp.src('css/main.css')
        .pipe(cleanCSS())
        .pipe(rename({
            suffix: '.min'
        }))
        .pipe(gulp.dest('css'));
});
{% endhighlight %}

In this task, we first tell gulp to get the `main.css` file in the `/css/` directory. Then, we run the clean-css on it, which minifies the file (but can do a lot of really cool things as well). After that, we use gulp-rename, and specify `.min` as the suffix to denote that this is a minified file and is different from the un-minified `main.css` file. Finally, using `gulp.dest()` we tell gulp to put the minified file inside the `/css/` directory.

## Running Both Tasks with One Command ##

Rather than run `gulp compile` then `gulp minify` one at a time, we can tell gulp to run both commands at the same time. To do this, we simply need to create a default gulp task, like so:

{% highlight js %}
gulp.task('default', ['compile', 'minify']);
{% endhighlight %}

Then when we run `gulp` from the command line, it will run the compile task and the minify task simultaneously. However, we actually need the compile task to run first, then the minify task to run only after the compile task is finished (so that we have an up-to-date `main.css` file to minify).

To do that, we'll install one more package called run-sequence with the command:

{% highlight none %}
npm install --save-dev run-sequence
{% endhighlight %}

We'll declare its variable at the top of the file:

{% highlight js %}
var runSequence = require('run-sequence');
{% endhighlight %}

And finally, we'll add run-sequence to the default task, specifying that the compile task should run first, then the minify task:

{% highlight js %}
gulp.task('default', function() {
    runSequence('compile', 'minify');
});
{% endhighlight %}

And there you have it &mdash; a complete gulpfile that compiles SCSS into CSS, then minifies that CSS. Gulp is a very powerful tool, and this is just a foray into some of its most [basic functionality](https://css-tricks.com/gulp-for-beginners/){:target="_blank"}. Making a gulpfile for your project is very much a path of learning and discovery because every project is unique and so each project's gulpfile will be unique. By knowing the fundamentals of gulp, however, you will be well-equipped to utilize this tool in future projects!